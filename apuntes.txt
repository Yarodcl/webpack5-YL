Empezar con webpack:

    Webpack funciona como un empaquetador, regularizando nuestros archivos para que estos se encuentren listos para entrar en produccion. 
    Para empezar a usar webpack siempre debemos iniciarlo en modo produccion para generar nuestra carpeta DIST. Luego lo empezaremos a mandar a modo "DEV"
    así webpack leerá nuestro archivo index.js ubicado en la carpeta src y lo empaquetará para su uso en produccion.

    Debemos instalar las dependencias de webpack y de react. Las cuales no debemos memmorizar pero siempre es bueno saberlas.

    Para su configuración debemos crear el archivo "webpack.config.js"

    Loader:

    Se encargan de transformar tu codigo para que webpack y el navegador lo entienda. Se trata de un pre procesador que importa tu codigo y lo transforma.
    Para configurar un loader en nuestro archivo webpack necesitamos crear un modulo con sus respectivas reglas. Tambien debemos instalar las dependencias de dichos loaders, en este caso babel

    React:

    Actualmente, no necesitamos importar react desde react para que nuestras aplicaciones funcionen, lo que necesitamos hacer es lo siguiente en nuestro archivo de configuración webpack:

        module: {
        rules: [ //Le asignamos las reglas al modulo para que trabaje con los loaders
            {
                test: /\.js$/, //Le indicamos que todos los archivos con dicha extension necesitan pasar por el loader
                loader: 'babel-loader',
                options: {
                    presets: [
                        [
                        '@babel/preset-react',
                        {
                            runtime: 'automatic' //Clasic, con este no necesitamos importar react de react
                        }
                        ]
            ] //Le damos una configuración a babel para que el mismo entienda react
                }
            }
        ]
    }

    CSS:

    Webpack es incapaz de leer css, al momento de compilar nuestro css nos arrojará un error ¿Como solucionamos esto? A través de un loader que nos permita trabajar css. En este caso necesitmaos dos loaders para que pueda entender nuestro archivo, style loader y css loader. Recordar que los loaders van de izquierda a derecha según la prioridad que necesitemos. Recuerda siempre instalar en la terminal los loaders que necesitamos!

    Plugins:

    A través de los plugins podemos tener distintas funcionalidades, en este caso podemos hacer que nos genere un html de forma automatica.

    HTML:

    Para generar nuestro HTML de forma automatica debemos descargar nuestro loader de HTML junto con nuestro plugin y asignarlo a nuestro archivo de configuración, luego darle el template del archivo al que queremos inyectarle. Rercordar que siempre debemos tenerlo fuera de nuestra carpeta build ya que ahí aparecerá todo lo generado

    Webpack-Server:

    Nos ayuda a que las compilaciones del modo dev sean mucho más rapidas, es decir, al momento de hacer un cambio en modo server el mismo se hará de forma automatica y lo veremos reflejado en nuestr app